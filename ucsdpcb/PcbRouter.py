# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _PcbRouter
else:
    import _PcbRouter

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class GridBasedRouter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, db: "kicadPcbDataBase &"):
        _PcbRouter.GridBasedRouter_swiginit(self, _PcbRouter.new_GridBasedRouter(db))
    __swig_destroy__ = _PcbRouter.delete_GridBasedRouter

    def route_all_net_with_ripup_and_reroute(self) -> "void":
        return _PcbRouter.GridBasedRouter_route_all_net_with_ripup_and_reroute(self)

    def set_input_scale(self, _iS: "int const") -> "void":
        return _PcbRouter.GridBasedRouter_set_input_scale(self, _iS)

    def set_num_ripup_reroute_iteration(self, _numRRI: "int const") -> "void":
        return _PcbRouter.GridBasedRouter_set_num_ripup_reroute_iteration(self, _numRRI)

    def set_enlarge_boundary(self, _eB: "int const") -> "void":
        return _PcbRouter.GridBasedRouter_set_enlarge_boundary(self, _eB)

    def set_layer_change_cost(self, _lCC: "double const") -> "void":
        return _PcbRouter.GridBasedRouter_set_layer_change_cost(self, _lCC)

    def set_trace_obstacle_cost(self, _toc: "double const") -> "void":
        return _PcbRouter.GridBasedRouter_set_trace_obstacle_cost(self, _toc)

    def set_via_obstacle_cost(self, _voc: "double const") -> "void":
        return _PcbRouter.GridBasedRouter_set_via_obstacle_cost(self, _voc)

    def set_pin_obstacle_cost(self, _poc: "double const") -> "void":
        return _PcbRouter.GridBasedRouter_set_pin_obstacle_cost(self, _poc)

# Register GridBasedRouter in _PcbRouter:
_PcbRouter.GridBasedRouter_swigregister(GridBasedRouter)



