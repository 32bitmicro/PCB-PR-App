# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_PcbDB', [dirname(__file__)])
        except ImportError:
            import _PcbDB
            return _PcbDB
        if fp is not None:
            try:
                _mod = imp.load_module('_PcbDB', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _PcbDB = swig_import_helper()
    del swig_import_helper
else:
    import _PcbDB
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class kicadPcbDataBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, kicadPcbDataBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, kicadPcbDataBase, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _PcbDB.new_kicadPcbDataBase(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PcbDB.delete_kicadPcbDataBase
    __del__ = lambda self : None;
    def printLayer(self) -> "void" : return _PcbDB.kicadPcbDataBase_printLayer(self)
    def printNet(self) -> "void" : return _PcbDB.kicadPcbDataBase_printNet(self)
    def printInst(self) -> "void" : return _PcbDB.kicadPcbDataBase_printInst(self)
    def printComp(self) -> "void" : return _PcbDB.kicadPcbDataBase_printComp(self)
    def printNetclass(self) -> "void" : return _PcbDB.kicadPcbDataBase_printNetclass(self)
    def printPcbRouterInfo(self) -> "void" : return _PcbDB.kicadPcbDataBase_printPcbRouterInfo(self)
    def printFile(self) -> "void" : return _PcbDB.kicadPcbDataBase_printFile(self)
    def printSegment(self) -> "void" : return _PcbDB.kicadPcbDataBase_printSegment(self)
    def printUnconnectedPins(self) -> "void" : return _PcbDB.kicadPcbDataBase_printUnconnectedPins(self)
    def printKiCad(self, folderName : 'std::string const'="", fileNameStamp : 'std::string const'="") -> "void" : return _PcbDB.kicadPcbDataBase_printKiCad(self, folderName, fileNameStamp)
    def printNodes(self) -> "void" : return _PcbDB.kicadPcbDataBase_printNodes(self)
    def printLockedInst(self) -> "void" : return _PcbDB.kicadPcbDataBase_printLockedInst(self)
    def printDesignStatistics(self) -> "void" : return _PcbDB.kicadPcbDataBase_printDesignStatistics(self)
    def printRoutedSegmentsWLAndNumVias(self) -> "void" : return _PcbDB.kicadPcbDataBase_printRoutedSegmentsWLAndNumVias(self)
    def buildKicadPcb(self) -> "bool" : return _PcbDB.kicadPcbDataBase_buildKicadPcb(self)
    def removeRoutedSegmentsAndVias(self) -> "void" : return _PcbDB.kicadPcbDataBase_removeRoutedSegmentsAndVias(self)
    def getPcbRouterInfo(self, *args) -> "bool" : return _PcbDB.kicadPcbDataBase_getPcbRouterInfo(self, *args)
    def getPinShapeRelativeCoordsToModule(self, *args) -> "void" : return _PcbDB.kicadPcbDataBase_getPinShapeRelativeCoordsToModule(self, *args)
    def getPinPosition(self, *args) -> "bool" : return _PcbDB.kicadPcbDataBase_getPinPosition(self, *args)
    def getCompBBox(self, *args) -> "bool" : return _PcbDB.kicadPcbDataBase_getCompBBox(self, *args)
    def getPinLayer(self, *args) -> "std::vector< int >" : return _PcbDB.kicadPcbDataBase_getPinLayer(self, *args)
    def getPadstackRotatedWidthAndHeight(self, *args) -> "void" : return _PcbDB.kicadPcbDataBase_getPadstackRotatedWidthAndHeight(self, *args)
    def getComponent(self, *args) -> "component &" : return _PcbDB.kicadPcbDataBase_getComponent(self, *args)
    def getInstance(self, *args) -> "instance &" : return _PcbDB.kicadPcbDataBase_getInstance(self, *args)
    def getNet(self, *args) -> "net &" : return _PcbDB.kicadPcbDataBase_getNet(self, *args)
    def getNetclass(self, *args) -> "netclass &" : return _PcbDB.kicadPcbDataBase_getNetclass(self, *args)
    def getFileName(self) -> "std::string" : return _PcbDB.kicadPcbDataBase_getFileName(self)
    def getInstances(self) -> "std::vector< instance > &" : return _PcbDB.kicadPcbDataBase_getInstances(self)
    def getComponents(self) -> "std::vector< component > &" : return _PcbDB.kicadPcbDataBase_getComponents(self)
    def getNets(self) -> "std::vector< net > &" : return _PcbDB.kicadPcbDataBase_getNets(self)
    def getUnconnectedPins(self) -> "std::vector< Pin > &" : return _PcbDB.kicadPcbDataBase_getUnconnectedPins(self)
    def getNetclasses(self) -> "std::vector< netclass > &" : return _PcbDB.kicadPcbDataBase_getNetclasses(self)
    def isInstanceId(self, *args) -> "bool" : return _PcbDB.kicadPcbDataBase_isInstanceId(self, *args)
    def isComponentId(self, *args) -> "bool" : return _PcbDB.kicadPcbDataBase_isComponentId(self, *args)
    def isNetId(self, *args) -> "bool" : return _PcbDB.kicadPcbDataBase_isNetId(self, *args)
    def isNetclassId(self, *args) -> "bool" : return _PcbDB.kicadPcbDataBase_isNetclassId(self, *args)
    def getNumCopperLayers(self) -> "int" : return _PcbDB.kicadPcbDataBase_getNumCopperLayers(self)
    def getLayerId(self, *args) -> "int" : return _PcbDB.kicadPcbDataBase_getLayerId(self, *args)
    def getLayerName(self, *args) -> "std::string" : return _PcbDB.kicadPcbDataBase_getLayerName(self, *args)
    def getCopperLayers(self) -> "std::map< int,std::string > &" : return _PcbDB.kicadPcbDataBase_getCopperLayers(self)
    def isCopperLayer(self, *args) -> "bool" : return _PcbDB.kicadPcbDataBase_isCopperLayer(self, *args)
    def getBoardBoundaryByPinLocation(self, *args) -> "void" : return _PcbDB.kicadPcbDataBase_getBoardBoundaryByPinLocation(self, *args)
    def getBoardBoundary(self) -> "points_2d &" : return _PcbDB.kicadPcbDataBase_getBoardBoundary(self)
    def addClearanceDrc(self, *args) -> "void" : return _PcbDB.kicadPcbDataBase_addClearanceDrc(self, *args)
    def printClearanceDrc(self) -> "void" : return _PcbDB.kicadPcbDataBase_printClearanceDrc(self)
    def getInstancesCount(self) -> "int" : return _PcbDB.kicadPcbDataBase_getInstancesCount(self)
    def getLargestClearance(self) -> "double" : return _PcbDB.kicadPcbDataBase_getLargestClearance(self)
kicadPcbDataBase_swigregister = _PcbDB.kicadPcbDataBase_swigregister
kicadPcbDataBase_swigregister(kicadPcbDataBase)

# This file is compatible with both classic and new-style classes.


